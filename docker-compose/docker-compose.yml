---
version: '2'
services:

  kafka-cluster:
    image: landoop/fast-data-dev:latest
    hostname: kafka-cluster
    environment:
      ADV_HOST: 127.0.0.1         # Change to 192.168.99.100 if using Docker Toolbox
      RUNTESTS: 0                 # Disable Running tests so the cluster starts faster
    ports:
      - 2181:2181                 # Zookeeper
      - 3030:3030                 # Landoop UI
      - 8081-8083:8081-8083       # REST Proxy, Schema Registry, Kafka Connect ports
      - 9581-9585:9581-9585       # JMX Ports
      - 9092:9092                 # Kafka Broker

  # Runs the Kafka KSQL Server
  ksql-server:
    image: "confluentinc/ksql-cli:5.0.0-beta1"
    hostname: ksql-server
    ports:
      - '8088:8088'
    depends_on:
#      - kafka
#      - schema-registry
      - kafka-cluster
    # Note: The container's `run` script will perform the same readiness checks
    # for Kafka and Confluent Schema Registry, but that's ok because they complete fast.
    # The reason we check for readiness here is that we can insert a sleep time
    # for topic creation before we start the application.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-cluster:9092 1 30 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready kafka-cluster 8081 30 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 20 && \
                       echo Starting KSQL... && \
                       /usr/bin/ksql-server-start /etc/ksql/ksql-server.properties'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_OPTS: "-Dbootstrap.servers=kafka-cluster:9092 -Dksql.schema.registry.url=http://kafka-cluster:8081 -Dlisteners=http://0.0.0.0:8088 -Dksql.streams.producer.retries=2147483647"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
    extra_hosts:
      - "moby:127.0.0.1"


  # Runs the KSQL CLI
  ksql-cli:
    image: "confluentinc/ksql-cli:5.0.0-beta1"
    hostname: ksql-cli
    depends_on:
#      - kafka
#      - schema-registry
      - ksql-server
#      - kafka-cluster
    command: "perl -e 'while(1){ sleep 99999 }'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      STREAMS_BOOTSTRAP_SERVERS: kafka-cluster:9092
      STREAMS_SCHEMA_REGISTRY_HOST: kafka-cluster
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
    extra_hosts:
      - "moby:127.0.0.1"

  control-center:
    image: confluentinc/cp-enterprise-control-center
    hostname: control-center
    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#      - kafka-connect
      - kafka-cluster
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      PORT: 9021


#Landoop UIs
#  schema-registry-ui:
#    image: landoop/schema-registry-ui:0.9.4
#    hostname: schema-registry-ui
#    ports:
#      - "8001:8000"
#    environment:
#      SCHEMAREGISTRY_URL: http://schema-registry:8081/
#      PROXY: "true"
#    depends_on:
#      - schema-registry
#    extra_hosts:
#      - "moby:127.0.0.1"
#
#  kafka-rest-proxy:
#    image: confluentinc/cp-kafka-rest:4.1.0
#    hostname: kafka-rest-proxy
#    ports:
#      - "8082:8082"
#    environment:
#      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
#      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081/
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: kafka-cluster:9092
#    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#    extra_hosts:
#      - "moby:127.0.0.1"
#
#  kafka-topics-ui:
#    image: landoop/kafka-topics-ui:0.9.3
#    hostname: kafka-topics-ui
#    ports:
#      - "8000:8000"
#    environment:
#      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
#      PROXY: "true"
#    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#      - kafka-rest-proxy
#    extra_hosts:
#      - "moby:127.0.0.1"

#  kafka-connect:
#    image: landoop/fast-data-dev-connect-cluster:latest
#    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#      - kafka-rest-proxy
#    environment:
#      - ID=01
#      - BS=kafka:9092
#      - ZK=zookeeper:2181
#      - SR=http://schema-registry:8081
#    extra_hosts:
#      - "moby:127.0.0.1"
#

#  kafka-connect:
#    image: confluentinc/cp-kafka-connect:4.1.0
#    hostname: kafka-connect
#    ports:
#      - "8083:8083"
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: "kafka-cluster:9092"
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
#      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
#      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
#      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
#      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
#    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#      - kafka-rest-proxy
#    extra_hosts:
#      - "moby:127.0.0.1"
#
#  kafka-connect-ui:
#    image: landoop/kafka-connect-ui:0.9.4
#    hostname: kafka-connect-ui
#    ports:
#      - "8003:8000"
#    environment:
#      CONNECT_URL: "http://kafka-connect:8083/"
#      PROXY: "true"
#    depends_on:
#      - kafka-connect
#    extra_hosts:
#      - "moby:127.0.0.1"

#  mongo:
#      image: mongo
#
#  mongo-api:
#      image: aleksxp/docker-eve-python
#      ports:
#          - "5000:5000"
#      volumes:
#          - .:/usr/src/app
#      depends_on:
#          - mongo

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    container_name: elasticsearch
    #restart: always
#    depends_on:
#      - kafka-connect
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
  kibana:
    image: docker.elastic.co/kibana/kibana:6.2.4
    container_name: kibana
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"

  mysql:
    image: mysql:5.7
    container_name: mysql
    ports:
      - 3306:3306
    volumes:
      - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: name_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
